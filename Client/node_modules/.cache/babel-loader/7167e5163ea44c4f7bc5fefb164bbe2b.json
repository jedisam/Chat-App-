{"ast":null,"code":"import _slicedToArray from \"/home/jedi/Documents/React ALL/Chat App/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/jedi/Documents/React ALL/Chat App/Client/src/Components/Chat/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        message = _useState6[0],\n        setMessage = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        messages = _useState8[0],\n        setMessages = _useState8[1];\n\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    setName(name);\n    setRoom(room);\n    socket = io(ENDPOINT);\n    socket.emit('join', {\n      name,\n      room\n    }, () => {//callback error handling\n    });\n    return () => {\n      socket.emit('diconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n  return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Chat \");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/jedi/Documents/React ALL/Chat App/Client/src/Components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;;AAEC,MAAMC,IAAI,GAAE,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA,oBACHN,QAAQ,CAAC,EAAD,CADL;AAAA;AAAA,QACnBO,IADmB;AAAA,QACdC,OADc;;AAAA,qBAEHR,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,QAEnBS,IAFmB;AAAA,QAEdC,OAFc;;AAAA,qBAGGV,QAAQ,CAAC,EAAD,CAHX;AAAA;AAAA,QAGnBW,OAHmB;AAAA,QAGXC,UAHW;;AAAA,qBAIKZ,QAAQ,CAAC,EAAD,CAJb;AAAA;AAAA,QAInBa,QAJmB;AAAA,QAIVC,WAJU;;AAK1B,QAAMC,QAAQ,GAAG,gBAAjB;AACAd,EAAAA,SAAS,CAAC,MAAI;AAAA,+BACUC,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CADV;AAAA,UACHV,IADG,sBACHA,IADG;AAAA,UACEE,IADF,sBACEA,IADF;;AAEVD,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,GAAGD,EAAE,CAACY,QAAD,CAAX;AAEAX,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAmB;AAACX,MAAAA,IAAD;AAAME,MAAAA;AAAN,KAAnB,EAA+B,MAAI,CAC/B;AACH,KAFD;AAIA,WAAO,MAAI;AACPL,MAAAA,MAAM,CAACc,IAAP,CAAY,WAAZ;AACAd,MAAAA,MAAM,CAACe,GAAP;AACH,KAHD;AAKH,GAhBQ,EAgBP,CAACJ,QAAD,EAAUT,QAAQ,CAACW,MAAnB,CAhBO,CAAT;AAkBAhB,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAqBT,OAAD,IAAW;AAC3BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAaF,OAAb,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIP,CAACE,QAAD,CAJO,CAAT;AAKI,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ;AAIP,CAjCA;;AAmCD,eAAeR,IAAf","sourcesContent":["import React, {useState, useEffect} from \"react\"\nimport queryString from \"query-string\"\nimport io from \"socket.io-client\"\n\nlet socket;\n\n const Chat =({ location })=> {\n    const [name,setName] = useState('')\n    const [room,setRoom] = useState('')\n    const [message,setMessage] = useState('')\n    const [messages,setMessages] = useState([])\n    const ENDPOINT = 'localhost:5000'\n    useEffect(()=>{\n        const {name,room} = queryString.parse(location.search)\n        setName(name)\n        setRoom(room)\n       \n        socket = io(ENDPOINT)\n        \n        socket.emit('join',{name,room},()=>{\n            //callback error handling\n        })\n\n        return ()=>{\n            socket.emit('diconnect')\n            socket.off()\n        }\n\n    },[ENDPOINT,location.search])\n\n    useEffect(()=>{\n        socket.on('message',(message)=>{\n            setMessages([...messages,message])\n        })\n    },[messages])\n        return(\n            <h1>Chat </h1>\n        )\n    \n}\n\nexport default Chat"]},"metadata":{},"sourceType":"module"}